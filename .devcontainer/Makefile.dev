all:

envcreate:
ifeq ($(strip $(editor)), cli)
ifeq ($(strip $(infra)), pod)
	$(MAKE) _setup_pod
else
	$(MAKE) _setup_compose
endif
else
	$(MAKE) _setup_vscode
endif

_validations:
ifeq ($(strip $(editor)), cli)
ifeq ($(strip $(infra)), pod)
ifeq ($(strip $(runtime)), docker)
	echo "Invalid configuration. Docker doens't support local pods"
	exit 1
endif
endif
endif

Makefile: _makegen
	# sed -i "s/project-name/$(project_name)/g" .gitignore
	# sed -i '1,25d' Makefile
	# sed -i 's/devcontainer: gendevenv/devcontainer:/g' Makefile

_prebuild: _validations
	-mv project-name $(project_name)
	sed -i "s/project-name/$(project_name)/g" $(project_name)/*
	sed -i "s/project-name/$(project_name)/g" docker-compose.yaml
	sed -i "s/project-name/$(project_name)/g" pod.yaml
	sed -i "s/project-name/$(project_name)/g" devcontainer.json
	sed -i "s/container-name/$(container_name)/g" devcontainer.json
	sed -i "s/container-name/$(container_name)/g" pod.yaml
	sed -i "s/container-name/$(container_name)/g" docker-compose.yaml

ifeq ($(strip $(flavor)), full)
	cp $(project_name)/Dockerfile.full.base $(project_name)/Dockerfile.base
	cp $(project_name)/Dockerfile.full.dev $(project_name)/Dockerfile.dev
	cp $(project_name)/Makefile.full $(project_name)/Makefile
else
	cp $(project_name)/Dockerfile.minimal.base $(project_name)/Dockerfile.base
	cp $(project_name)/Dockerfile.minimal.dev $(project_name)/Dockerfile.dev
	cp $(project_name)/Makefile.minimal $(project_name)/Makefile
endif
	cat $(project_name)/Dockerfile.base > $(project_name)/Dockerfile
	sed '1d' $(project_name)/Dockerfile.dev >> $(project_name)/Dockerfile

baseimage: _prebuild
	# $(runtime) build -f $(project_name)/Dockerfile.base -t localhost/$(project_name):base .
	# $(runtime) build -f $(project_name)/Dockerfile.dev -t localhost/$(project_name):dev .
	$(runtime) build -f $(project_name)/Dockerfile -t localhost/$(project_name):dev .

_setup_vscode: baseimage
	devcontainer up --docker-path $(runtime) --workspace-folder .. # Ensure that devcontainer cli is installed (sudo npm install -g @devcontainers/cli)

_setup_pod: baseimage
ifeq ($(strip $(runtime)), podman)
	sed -i "s/$(project_name)\///g" $(project_name)/Dockerfile
	podman kube play --replace pod.yaml # Ensure that the podman cli is installed
else
	echo "Invalid runtime and infra combination"
	exit 1
endif

_setup_compose: baseimage
	$(runtime) compose up -d # Ensure that either of podman-compose or docker compose is installed

.PHONY: list
list:
	@LC_ALL=C $(MAKE) -pRrq -f $(firstword $(MAKEFILE_LIST)) : 2>/dev/null | \
	awk -v RS= -F: '/(^|\n)# Files(\n|$$)/,/(^|\n)# Finished Make data base/ {if ($$1 !~ "^[#.]") {print $$1}}' | \
   	sort | grep -E -v -e '^[^[:alnum:]]' -e '^$@$$'

envstart:
ifeq ($(strip $(editor)), cli)
ifeq ($(strip $(infra)), pod)
	podman pod start $(project_name)
else
	$(runtime) compose up -d
endif
else
	devcontainer up --docker-path $(runtime) --workspace-folder ..
endif

enventer: envstart
ifeq ($(strip $(editor)), cli)
ifeq ($(strip $(infra)), pod)
	podman exec -it -w /workspace $(project_name)-$(container_name) bash
else
	$(runtime) compose exec -w /workspace development bash
endif
else
	devcontainer open ..  # Ensure that vscode binary is discoverable in $PATH
endif

envstop:
ifeq ($(strip $(editor)), cli)
ifeq ($(strip $(infra)), pod)
	podman pod stop $(project_name)
else
	$(runtime) compose stop
endif
else
	$(runtime) stop vscode-$(container_name)
endif

envdestroy: envstop
ifeq ($(strip $(editor)), cli)
ifeq ($(strip $(infra)), pod)
	podman kube play --down pod.yaml
else
	$(runtime) compose down
endif
else
	$(runtime) container rm vscode-$(container_name)
endif

envpurge: envdestroy
ifeq ($(strip $(editor)), cli)
	$(runtime) image rm localhost/$(project_name):dev
else
	# $(runtime) container rm vscode-$(container_name)
endif

_makegen: _prebuild
	rm -f Makefile
	echo -e "all:" >> Makefile
	echo -e "\nenvcreate:" >> Makefile
ifeq ($(strip $(editor)), cli)
ifeq ($(strip $(infra)), pod)
	echo -e "\tpodman kube play --replace pod.yaml" >> Makefile
else
	echo -e "\t$(runtime) compose build" >> Makefile
endif
else
	echo -e "\tdevcontainer build .." >> Makefile
endif
	echo -e "\nenvstart:" >> Makefile
ifeq ($(strip $(editor)), cli)
ifeq ($(strip $(infra)), pod)
	echo -e "\tpodman pod start $(project_name)" >> Makefile
else
	echo -e "\t$(runtime) compose up -d" >> Makefile
endif
else
	echo -e "\tdevcontainer up --docker-path $(runtime) --workspace-folder .." >> Makefile
endif
	echo -e "\nenventer: envstart" >> Makefile
ifeq ($(strip $(editor)), cli)
ifeq ($(strip $(infra)), pod)
	echo -e "\tpodman exec -it -w /workspace $(project_name)-$(container_name) bash" >> Makefile
else
	echo -e "\t$(runtime) compose exec -w /workspace development bash" >> Makefile
endif
else
	echo -e "\tdevcontainer open ..  # Ensure that vscode binary is discoverable in $PATH" >> Makefile
endif
	echo -e "\nenvstop:" >> Makefile
ifeq ($(strip $(editor)), cli)
ifeq ($(strip $(infra)), pod)
	echo -e "\tpodman pod stop $(project_name)" >> Makefile
else
	echo -e "\t$(runtime) compose stop" >> Makefile
endif
else
	echo -e "\t$(runtime) stop vscode-$(container_name)" >> Makefile
endif
	echo -e "\nenvdestroy: envstop" >> Makefile
ifeq ($(strip $(editor)), cli)
ifeq ($(strip $(infra)), pod)
	echo -e "\tpodman kube play --down pod.yaml" >> Makefile
else
	echo -e "\t$(runtime) compose down" >> Makefile
endif
else
	echo -e "\t$(runtime) container rm vscode-$(container_name)" >> Makefile
endif
	echo -e "\nenvpurge: envdestroy" >> Makefile
ifeq ($(strip $(editor)), cli)
	echo -e "\t$(runtime) image rm localhost/$(project_name):dev"
else
	# $(runtime) container rm vscode-$(container_name)
endif

gendevenv: Makefile
