runtime_args:=
compose:=
editor:=cli
infra:=pod
optimized:=true
container_name:=devcontainer
container_prefix:=$(project_name)
rootless:=true
vcs:=false
action:=
devcontainer_compose_arg:=
minimal:=true

ifeq ($(runtime), docker)
ifeq ($(rootless), true)
$(eval runtime_args:=--context rootless)
endif
else ifeq ($(runtime), podman)
ifneq ($(shell podman compose 2>&1 > /dev/null; echo $$?), 0)
$(eval compose:=podman-compose)
$(eval devcontainer_compose_arg:=--docker-compose-path $(compose))
endif
endif

all:

_validations:
ifeq ($(project_name), project-name)
	echo "Invalid configuration. Please provide a valid project name"
	exit 1
endif
ifeq ($(editor), cli)
ifeq ($(infra), pod)
ifeq ($(runtime), docker)
	echo "Invalid configuration. Docker doesn't support local pods"
	exit 1
endif
endif
endif

ifeq ($(editor), vscode)
ifeq ($(infra), pod)
	echo "Invalid configuration. VSCode devcontainer configuration doens't support local pods"
	exit 1
endif
endif

Makefile: _makegen
	- [ -d ../.git ] && sed -i "/.devcontainer/d" ../.git/info/exclude
	- [ -d ../.git ] && sed -i "/\/Makefile.devcontainer/d" ../.git/info/exclude
	- [ -f ../.git ] && sed -i "/.devcontainer/d" $(shell cat ../.git | cut -d ':' -f 2)/../../info/exclude
	- [ -f ../.git ] && sed -i "/\/Makefile.devcontainer/d" $(shell cat ../.git | cut -d ':' -f 2)/../../info/exclude
ifeq ($(strip $(vcs)), false)
	- [ -d ../.git ] && echo "/.devcontainer" >> ../.git/info/exclude
	- [ -d ../.git ] && echo "/Makefile.devcontainer" >> ../.git/info/exclude
	- [ -f ../.git ] && echo "/.devcontainer" >> $(shell cat ../.git | cut -d ':' -f 2)/../../info/exclude
	- [ -f ../.git ] && echo "/Makefile.devcontainer" >> $(shell cat ../.git | cut -d ':' -f 2)/../../info/exclude
endif


_prebuild: _validations
	rm -rf project-name/project-name
	rm -rf $(project_name)

	cp -r project-name/ $(project_name)/

	mkdir -p $(project_name)/$(project_name)
	mkdir -p project-name/project-name

ifeq ($(minimal), true)
	cp project-name/Makefile.alpine project-name/project-name/Makefile
	cp project-name/Makefile.alpine project-name/Makefile

	cp project-name/Dockerfile.alpine.dev project-name/Dockerfile.dev
	cp project-name/Dockerfile.alpine.base project-name/Dockerfile.base

	cp $(project_name)/Dockerfile.alpine.dev $(project_name)/Dockerfile.dev
	cp $(project_name)/Dockerfile.alpine.base $(project_name)/Dockerfile.base

	cp $(project_name)/Makefile.alpine $(project_name)/$(project_name)/Makefile
	cp $(project_name)/Makefile.alpine $(project_name)/Makefile
else
	cp project-name/Makefile.debian project-name/project-name/Makefile
	cp project-name/Makefile.debian project-name/Makefile

	cp project-name/Dockerfile.debian.dev project-name/Dockerfile.dev
	cp project-name/Dockerfile.debian.base project-name/Dockerfile.base

	cp $(project_name)/Dockerfile.debian.dev $(project_name)/Dockerfile.dev
	cp $(project_name)/Dockerfile.debian.base $(project_name)/Dockerfile.base

	cp $(project_name)/Makefile.debian $(project_name)/$(project_name)/Makefile
	cp $(project_name)/Makefile.debian $(project_name)/Makefile
endif

	cp devcontainer.template.json devcontainer.json
	cp docker-compose.template.yaml docker-compose.yaml
	cp pod.template.yaml pod.yaml

ifeq ($(editor), vscode)
ifeq ($(infra), compose)
	cp devcontainer-compose.template.json devcontainer.json
endif
endif

	find $(project_name) -type f -exec sed -i "s/project-name/$(project_name)/g" {} \;

	for file in docker-compose.yaml pod.yaml devcontainer.json; do \
		sed -i "s|project-name|$(project_name)|g" $$file || true ; \
		sed -i "s|container-name|$(container_name)|g" $$file || true ; \
		sed -i "s|container-prefix|$(container_prefix)|g" $$file || true ; \
		sed -i "s|user-home|$${HOME}|g" $$file || true ; \
	done

	cat $(project_name)/Dockerfile.base > $(project_name)/Dockerfile
	sed '1d' $(project_name)/Dockerfile.dev >> $(project_name)/Dockerfile

baseimage: _prebuild
	$(runtime) inspect localhost/$(project_name):dev 2>&1 > /dev/null && exit 0 || \
	$(runtime) inspect localhost/project-name:dev 2>&1 > /dev/null && \
	$(runtime) tag localhost/project-name:dev localhost/$(project_name):dev && exit 0 || \
	$(runtime) inspect localhost/project-name:base 2>&1 > /dev/null && \
	$(runtime) tag localhost/project-name:base localhost/$(project_name):base && \
	$(runtime) build -f project-name/Dockerfile.dev -t localhost/project-name:dev -t localhost/$(project_name):dev . && exit 0 || \
	$(runtime) build -f project-name/Dockerfile.base -t localhost/project-name:base -t localhost/$(project_name):base . && \
	$(runtime) build -f project-name/Dockerfile.dev -t localhost/project-name:dev -t localhost/$(project_name):dev .

_makegen: _prebuild
	rm -f Makefile
	printf "all:\n" >> Makefile
	printf "\nlist:\n" >> Makefile
	printf "\t@" >> Makefile
	printf "LC_ALL=C \$$(MAKE) -pRrq -f \$$(firstword \$$(MAKEFILE_LIST)) \\: 2>/dev/null | \\" >> Makefile
	printf "\n\t" >> Makefile
	printf "awk -v RS= -F: '/(^|\\\n)# Files(\\\n|\$$\$$)/,/(^|\\\n)# Finished Make data base/ {if (\$$\$$1 !~ \"^[#.]\") {print \$$\$$1}}' | \\" >> Makefile
	printf "\n\t" >> Makefile
	printf "sort | grep -E -v -e '^[^[:alnum:]]' -e '^\$$@\$$\$$'\n" >> Makefile

ifeq ($(optimized), true)
	$(MAKE) -e -f Makefile.dev baseimage
endif


# envcreate: ...
	printf "\nenvcreate:\n" >> Makefile
ifeq ($(editor), cli)
ifeq ($(infra), pod)
	printf "\tpodman kube play --replace pod.yaml --network=host\n" >> Makefile
else ifneq ($(compose),)
	printf "\t$(compose) build\n" >> Makefile
else
	printf "\t$(runtime) $(runtime_args) compose build\n" >> Makefile
endif
else
	# Ensure that devcontainer cli is installed (via 'Dev Containers' extension in VSCode)
ifeq ($(runtime), docker)
ifeq ($(rootless), true)
	printf "\tenv DOCKER_CONTEXT=rootless " >> Makefile
endif
endif
	printf "\t$$(find ~/.config/Code/User -name devcontainer) build --docker-path $(runtime) $(devcontainer_compose_args) ..\n" >> Makefile
endif


# envstart: ...
	printf "\nenvstart:\n" >> Makefile
ifeq ($(editor), cli)
ifeq ($(infra), pod)
	printf "\tpodman pod start $(container_prefix)\n" >> Makefile
else ifneq ($(compose),)
	printf "\t$(compose) up -d --wait\n" >> Makefile
else
	printf "\t$(runtime) $(runtime_args) compose up -d --wait\n" >> Makefile
endif
else
ifeq ($(runtime), docker)
ifeq ($(rootless), true)
	printf "\tenv DOCKER_CONTEXT=rootless " >> Makefile
endif
endif
	printf "\t$$(find ~/.config/Code/User -name devcontainer) up --docker-path $(runtime) $(devcontainer_compose_arg) --workspace-folder ..\n" >> Makefile
endif


# enventer: ...
	printf "\nenventer: envstart\n" >> Makefile
ifeq ($(editor), cli)
	printf "\t$(runtime) $(runtime_args) exec --detach-keys 'ctrl-@,ctrl-q' -it -w $(project_root) $(container_prefix)-$(container_name) bash\n" >> Makefile
else
ifeq ($(runtime), docker)
	printf "\tenv DOCKER_CONTEXT=rootless " >> Makefile
endif
	# Ensure that vscode binary is discoverable in $PATH
	printf "\t$$(find ~/.config/Code/User -name devcontainer) open ..\n" >> Makefile
endif


# envstop: ...
	printf "\nenvstop:\n" >> Makefile
ifeq ($(editor), cli)
ifeq ($(infra), pod)
	printf "\tpodman pod stop $(container_prefix) || true\n" >> Makefile
else ifneq ($(compose),)
	printf "\t$(compose) stop || true\n" >> Makefile
else
	printf "\t$(runtime) $(runtime_args) compose stop || true\n" >> Makefile
endif
else
	printf "\t$(runtime) $(runtime_args) stop $(container_prefix)-$(container_name) || true\n" >> Makefile
endif


# envdestroy: ...
	printf "\nenvdestroy: envstop\n" >> Makefile
ifeq ($(editor), cli)
ifeq ($(infra), pod)
	printf "\tpodman kube play --down pod.yaml\n" >> Makefile
else ifneq ($(compose),)
	printf "\t$(compose) down || true\n" >> Makefile
else
	printf "\t$(runtime) $(runtime_args) compose down || true\n" >> Makefile
endif
else
	printf "\t$(runtime) $(runtime_args) container rm $(container_prefix)-$(container_name) || true\n" >> Makefile
endif


# envpurge: ...
	printf "\nenvpurge: envdestroy\n" >> Makefile
ifeq ($(editor), cli)
	printf "\t$(runtime) image rm localhost/$(project_name):dev\n" >> Makefile
	printf "\t$(runtime) image rm localhost/$(project_name):base\n" >> Makefile
else
	# $(runtime) container rm vscode-$(container_name)
endif


# envclean: ...
	printf "\nenvclean:\n" >> Makefile
	printf "\trm -rf $(project_name)\n" >> Makefile
	printf "\trm -rf project-name/project-name\n" >> Makefile
	printf "\trm -rf project-name/Dockerfile.base\n" >> Makefile
	printf "\trm -rf project-name/Dockerfile.dev\n" >> Makefile
	printf "\trm -rf project-name/Makefile\n" >> Makefile
	printf "\trm -f devcontainer.json\n" >> Makefile
	printf "\trm -f docker-compose.yaml\n" >> Makefile
	printf "\trm -f pod.yaml\n" >> Makefile
	printf "\trm -f Makefile\n" >> Makefile
	printf "\t- [ -d ../.git ] && sed -i '/.devcontainer/d' ../.git/info/exclude\n" >> Makefile
	printf "\t- [ -d ../.git ] && sed -i '/\/Makefile.devcontainer/d' ../.git/info/exclude\n" >> Makefile
	printf "\t- [ -f ../.git ] && sed -i '/.devcontainer/d' $(shell cat ../.git | cut -d ':' -f 2)/../../info/exclude\n" >> Makefile
	printf "\t- [ -f ../.git ] && sed -i '/\/Makefile.devcontainer/d' $(shell cat ../.git | cut -d ':' -f 2)/../../info/exclude\n" >> Makefile

gendevenv: Makefile
