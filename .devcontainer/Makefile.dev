all:

_validations:
ifeq ($(project_name), project-name)
	echo "Invalid configuration. Please provide a valid project name"
	exit 1
endif
ifeq ($(editor), cli)
ifeq ($(infra), pod)
ifeq ($(runtime), docker)
	echo "Invalid configuration. Docker doens't support local pods"
	exit 1
endif
endif
endif

ifeq ($(editor), vscode)
ifeq ($(infra), pod)
	echo "Invalid configuration. VSCode devcontainer configuration doens't support local pods"
	exit 1
endif
endif

Makefile: _makegen
	-test -d ../.git && sed -i "/.devcontainer/d" ../.git/info/exclude
	-test -d ../.git && sed -i "/Makefile/d" ../.git/info/exclude
	-test -f ../.git && sed -i "/.devcontainer/d" $(shell cat ../.git | cut -d ':' -f 2)/../../info/exclude
	-test -f ../.git && sed -i "/Makefile/d" $(shell cat ../.git | cut -d ':' -f 2)/../../info/exclude
ifeq ($(strip $(vcs)), false)
	-test -d ../.git && echo "/.devcontainer" >> ../.git/info/exclude
	-test -d ../.git && echo "/Makefile" >> ../.git/info/exclude
	-test -f ../.git && echo "/.devcontainer" >> $(shell cat ../.git | cut -d ':' -f 2)/../../info/exclude
	-test -f ../.git && echo "/Makefile" >> $(shell cat ../.git | cut -d ':' -f 2)/../../info/exclude
endif


_prebuild: _validations
	rm -rf project-name/project-name
	rm -rf $(project_name)

	cp -r project-name/ $(project_name)/

	mkdir -p project-name/project-name
	cp project-name/Makefile project-name/project-name/

	mkdir -p $(project_name)/$(project_name)
	cp $(project_name)/Makefile $(project_name)/$(project_name)/

	cp devcontainer.template.json devcontainer.json
	cp docker-compose.template.yaml docker-compose.yaml
	cp pod.template.yaml pod.yaml

ifeq ($(editor), vscode)
ifeq ($(infra), compose)
	cp devcontainer-compose.template.json devcontainer.json
	sed -i "s/container-name/vscode-container-name/g" devcontainer.json
	sed -i "/command:/d" docker-compose.yaml
endif
endif

	find $(project_name) -type f -exec sed -i "s/project-name/$(project_name)/g" {} \;

	sed -i "s/project-name/$(project_name)/g" docker-compose.yaml
	sed -i "s/project-name/$(project_name)/g" pod.yaml
	sed -i "s/project-name/$(project_name)/g" devcontainer.json
	sed -i "s/container-name/$(container_name)/g" devcontainer.json
	sed -i "s/container-name/$(container_name)/g" pod.yaml
	sed -i "s/container-name/$(container_name)/g" docker-compose.yaml

	cat $(project_name)/Dockerfile.base > $(project_name)/Dockerfile
	sed '1d' $(project_name)/Dockerfile.dev >> $(project_name)/Dockerfile

baseimage: _prebuild
ifeq ($(optimized), true)
	$(runtime) inspect localhost/project-name:base 2>&1 > /dev/null && \
	$(runtime) tag localhost/project-name:base localhost/$(project_name):base || \
	$(runtime) build -f project-name/Dockerfile.base -t localhost/project-name:base .
	$(runtime) build -f project-name/Dockerfile.dev -t localhost/project-name:dev .
	$(runtime) build -f $(project_name)/Dockerfile.base -t localhost/$(project_name):base .
	$(runtime) build -f $(project_name)/Dockerfile.dev -t localhost/$(project_name):dev .
else
	$(runtime) build -f $(project_name)/Dockerfile -t localhost/$(project_name):dev .
endif

.PHONY: list
list:
	@LC_ALL=C $(MAKE) -pRrq -f $(firstword $(MAKEFILE_LIST)) : 2>/dev/null | \
	awk -v RS= -F: '/(^|\n)# Files(\n|$$)/,/(^|\n)# Finished Make data base/ {if ($$1 !~ "^[#.]") {print $$1}}' | \
   	sort | grep -E -v -e '^[^[:alnum:]]' -e '^$@$$'

_makegen: _prebuild
	rm -f Makefile
	printf "all:\n" >> Makefile
	printf "\nenvcreate:\n" >> Makefile
ifeq ($(editor), cli)
ifeq ($(infra), pod)
	printf "\tpodman kube play --replace pod.yaml --network=host\n" >> Makefile
else
	printf "\t$(runtime) compose build\n" >> Makefile
endif
else
	# Ensure that devcontainer cli is installed (sudo npm install -g @devcontainers/cli)
	printf "\tdevcontainer build ..\n" >> Makefile
endif
	printf "\nenvstart:\n" >> Makefile
ifeq ($(editor), cli)
ifeq ($(infra), pod)
	printf "\tpodman pod start $(project_name)\n" >> Makefile
else
	printf "\t$(runtime) compose up -d\n" >> Makefile
endif
else
	printf "\tdevcontainer up --docker-path $(runtime) --workspace-folder ..\n" >> Makefile
endif
	printf "\nenventer: envstart\n" >> Makefile
ifeq ($(editor), cli)
ifeq ($(infra), pod)
	printf "\tpodman exec -it $(project_name)-$(container_name) bash\n" >> Makefile
else
	printf "\t$(runtime) compose exec development bash\n" >> Makefile
endif
else
	# Ensure that vscode binary is discoverable in $PATH
	printf "\tdevcontainer open ..\n" >> Makefile
endif
	printf "\nenvstop:\n" >> Makefile
ifeq ($(editor), cli)
ifeq ($(infra), pod)
	printf "\tpodman pod stop $(project_name)\n" >> Makefile
else
	printf "\t$(runtime) compose stop\n" >> Makefile
endif
else
	printf "\t$(runtime) stop vscode-$(container_name)\n" >> Makefile
endif
	printf "\nenvdestroy: envstop\n" >> Makefile
ifeq ($(editor), cli)
ifeq ($(infra), pod)
	printf "\tpodman kube play --down pod.yaml\n" >> Makefile
else
	printf "\t$(runtime) compose down\n" >> Makefile
endif
else
	printf "\t$(runtime) container rm vscode-$(container_name)\n" >> Makefile
endif
	printf "\nenvpurge: envdestroy\n" >> Makefile
ifeq ($(editor), cli)
	printf "\t$(runtime) image rm localhost/$(project_name):dev\n"
else
	# $(runtime) container rm vscode-$(container_name)
endif
	printf "\nenvclean:\n" >> Makefile
	printf "\trm -rf $(project_name)\n" >> Makefile
	printf "\trm -rf project-name/project-name\n" >> Makefile
	printf "\trm -f devcontainer.json\n" >> Makefile
	printf "\trm -f docker-compose.yaml\n" >> Makefile
	printf "\trm -f pod.yaml\n" >> Makefile
	printf "\trm -f Makefile\n" >> Makefile
	printf "\trm -f .optimized\n" >> Makefile

gendevenv: Makefile
